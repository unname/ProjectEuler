#include <stdlib.h>
#include <iostream>

#include "euler_functions.h"


// Consider all integer combinations of a^b for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:
//
//          2^2 = 4,  2^3 = 8,   2^4 = 16,  2^5 = 32
//          3^2 = 9,  3^3 = 27,  3^4 = 81,  3^5 = 243
//          4^2 = 16, 4^3 = 64,  4^4 = 256, 4^5 = 1024
//          5^2 = 25, 5^3 = 125, 5^4 = 625, 5^5 = 3125
//
// If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms :
//
//      4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125
//
// How many distinct terms are in the sequence generated by a^b for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100 ?

int main(int argc, char **argv)
{
    size_t a_low_lomit = 2;
    size_t b_low_lomit = 2;
    size_t a_high_limit = 100;
    size_t b_high_limit = 100;

    size_t result = (a_high_limit - a_low_lomit + 1) * (b_high_limit - b_low_lomit + 1);

    for (size_t a = a_low_lomit; a <= a_high_limit; ++a)
    {
        size_t base = 0;
        size_t power = 0;

        //проверяем является ли число степенным
        if (test_power(a, &base, &power))
        {
            for (size_t b = b_low_lomit; b <= b_high_limit; ++b)
            {
                for (size_t i = 1; i < power; ++i)
                {
                    if (((b * power) % i == 0) && (power * b / i <= b_high_limit))
                    {
#ifdef _DEBUG
                        printf("%Iu^%Iu = %Iu^%Iu\n", a, b, (size_t)pow(base, i), power * b / i);
#endif
                        result--;
                        break;
                    }
                }
            }
        }
    }
    
    printf("\nResult: %Iu\n", result);

    return 0;
}